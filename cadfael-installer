#!/bin/bash
# VERY dumb installer for CadfaelBrew - in Bash for maximum portability
# at present. Maybe Python/Ruby later on if more advanced functionality
# is needed.
# - Determine system
# - Check deps
# - Checkout correct repo
# - brew doctor
# - (optional) brew install

#-----------------------------------------------------------------------
# MINIMAL API
#-----------------------------------------------------------------------
# - Logging
#
# - Exit with failure
_echo_exit()
{
  _echo_error "$1"
  exit 1
}

# - Info
_echo_info()
{
  echo "[cadfael:info] $1"
}

# - Warning
_echo_warning()
{
  echo "[cadfael:warning] $1" 1>&2
}

# - Error
_echo_error()
{
  echo "[cadfael:error] $1" 1>&2
}

#-----------------------------------------------------------------------
# GLOBAL VALUES/SETTINGS
#-----------------------------------------------------------------------
# - Self location and CWD
readonly kCADFAELINSTALLERDIR=`dirname $0`
readonly kWORKINGDIR=`pwd`

# - Github baseurl
readonly kGITHUBORG="SuperNEMO-DBD"
readonly kGITHUBURL="https://github.com/$kGITHUBORG"
readonly kCADFAELTAP="$kGITHUBORG/cadfael"

# - Supported systems
declare -a kSUPPORTEDSYSTEMS
readonly kSUPPORTEDSYSTEMS=("Darwin-10.9"\
                            "Darwin-10.10" \
                            "SUSELINUX-11" \
                            "Ubuntu-14.04")

# - Operating System ID, Version and Packaging System
readonly kOS=$(uname -s)

case "$kOS" in
  "Darwin")
    readonly kOSVERSION=$(sw_vers -productVersion)
    readonly kPACKAGETOOL="pkg"
    ;;
  "Linux")
    # - Determine distro
    kLSB_RELEASE=$(command -v lsb_release)
    if [ -n "${kLSB_RELEASE}" ] ; then
      readonly kOSDISTRO=$($kLSB_RELEASE -si | sed 's/ //')
      readonly kOSVERSION=$($kLSB_RELEASE -sr)
    else
      # Long term, probably want to check existence of the
      # /etc/<NAME>-release files because lsb_release may not always
      # be installed on a base system
      _echo_exit "error: No 'lsb_release' command found"
    fi

    # - Determine package/manager system
    if [[ "$kOSDISTRO" == "Debian|Ubuntu" ]] ; then
      readonly kPACKAGETOOL="dpkg"
      readonly kPACKAGEMANAGER="apt"
    elif [[ "$kOSDISTRO" == "RedHat.*|CentOS|Scientific" ]] ; then
      readonly kPACKAGETOOL="rpm"
      readonly kPACKAGETOOL="yum"
    elif [[ "$kOSDISTRO" == "SUSELINUX" ]] ; then
      readonly kPACKAGETOOL="rpm"
      readonly kPACKAGEMANAGER="zypper"
    else
      # Can only mark as empty and warn later on that no packages can
      # be checked
      readonly kPACKAGETOOL=""
      readonly kPACKAGEMANAGER=""
    fi
    ;;
  *)
    # A hard fail here because we really can't progress any further
    _echo_error "Unsupported OS '$kOS'"
    _echo_exit  "Only Linux and Darwin are currently supported"
    ;;
esac

# - Architecture
readonly kARCH=$(uname -m)
if [ "${kARCH}" != "x86_64" ] ; then
  # Hard fail because it's not worth going any further
  _echo_error "Unsupported architecture '$kARCH'"
  _echo_exit  "Only 'x86_64' architectures are currently supported"
fi

#-----------------------------------------------------------------------
# MAIN API
#-----------------------------------------------------------------------
# - System validation
# Take system 'distro-version' string and return 0 if supported, 1 otherwise
isSystemSupported () {
  local elem
  for elem in "${kSUPPORTEDSYSTEMS[@]}" ; do
    [[ "$elem" == "$1" ]] && return 0
  done
  return 1
}

#-----------------------------------------------------------------------
# LINUX PACKAGE CHECKS
# - Each supported system will have list of package names to be checked
# possibly also package groups. That should then be input to relevant
# package query check. Any missing packages should be collected and
# reported to user in a command line format, e.g.
#
# """
# Your system has missing packages, please run
#
#   yum install foo bar baz
#"""

#-----------------------------------------------------------------------
# Check if a given rpm package is installed
# Echo package name-version-release string if installed, "no" otherwise
checkRPM () {
  isInstalled=$(rpm -q $1 --qf "%{NAME}-%{VERSION}-%{RELEASE}")
  if [ $? -eq 0 ] ; then
    echo "$isInstalled"
  else
    echo "no"
  fi
}

#-----------------------------------------------------------------------
# Check if a given deb package is installed
checkDeb () {
  _echo_exit "checkDeb not implemented yet"
}

#-----------------------------------------------------------------------
# Example of loop over list of packages, with collection of missing ones
#for pkg in $requiredPkgs ; do
#  havePkg=$(checkRPM $pkg)
#  _echo_info "checking that RPM '$pkg' is installed: $havePkg"
#  if [ "$havePkg" = "no" ] ; then
#    missingPkgs="$missingPkgs $pkg"
#  fi
#done
#
#if [ -n "$missingPkgs" ] ; then
#  _echo_error "RPM packages '$missingPkgs' are not installed on this system"
#  _echo_error "Please run (or get your sysadmin to run):
#  
#  yum install $missingPkgs
#  "
#  #_echo_exit "Unable to bootstrap: missing required system packages"
#fi
#}

#-----------------------------------------------------------------------
# - Check that the OS provides the software on which brew relies
#   On OSX, homebrew's doctor will handle this for us, though note
#   that their installer also checks for Xcode
#   On Linux, defer to more involved checking system
doCheckSystemSoftware () {
  case "$kOS" in
    "Darwin")
      _echo_warning "Not implemented: needs to check for xcode"
      return 0
      ;;
    "Linux")
      _echo_warning "Not implemented: check for rpms/debs"
      return 0
      ;;
    *)
      _echo_exit "doCheckSystemSoftware run with unknown OS '$kOS'"
      return 1
      ;;
  esac
}

#-----------------------------------------------------------------------
# Clone appropriate github repo for this OS into supplied directory
doGithubClone () {
  local baseurl="$kGITHUBURL"
  local reponame=""
  case "$kOS" in
    "Darwin")
      reponame="homebrew.git"
      ;;
    "Linux")
      reponame="linuxbrew.git"
      ;;
    *)
      _echo_exit "doGithubClone run with unknown kOS('$kOS')"
      ;;
  esac

  local cloneurl="$baseurl/$reponame"
  local clonedir=$(readlink -m "$1/Cadfael.git")

  if [ -d "$clonedir" ] ; then
    _echo_exit "Installation destination exists"
  fi

  _echo_info "Cloning '$reponame' into $clonedir"
  git clone "$cloneurl" "$clonedir"
  return $?
}

#-----------------------------------------------------------------------
# Perform initial setup of Brew
# Tap Cadfael, run doctor
doBrewSetup() {
  _echo_info "setting up brew"
  if [ -z "$1" ] ; then _echo_exit "No install directory" ; fi

  _echo_info "Tapping formulae from '$kCADFAELTAP'"
  if ! PATH="$1/Cadfael.git/bin:$PATH" brew tap "$kCADFAELTAP" ; then
    _echo_exit "failed to tap '$kCADFAELTAP'"
  fi

  if ! PATH="$1/Cadfael.git/bin:$PATH" brew doctor ; then
    _echo_warning "brew doctor issued warnings
  
  These generally are not severe and can be ignored

  "
  fi

  return 0
}

#-----------------------------------------------------------------------
# Usage and Help
#
displayUsage() {
  echo "Usage: cadfael-installer [-h] [-p <prefix>]"
}

displayHelp() {
  cat <<EOF
$(displayUsage)

Install Cadfael.git package manager and base SDK for SuperNEMO.
Checks if OS is supported, checks that required system software is present,
clones git repository.

Requires a working network connection.

Arguments:
  -h                    Print this help message and exit
  -p [DIR]              Install Cadfael.git bundle under DIR
                        If DIR is not provided, it defaults to the
                        current working directory

Exit status:
  0  if OK
  1  if any step failed

Messages are logged to stdout/stderr as required.

EOF
}

#-----------------------------------------------------------------------
# IMPLEMENTATION

main() {
  local installPrefix=$(pwd)

  while getopts ":hp:" opt ; do
    case $opt in
      p)
        local installPrefix="$OPTARG"
        ;;
      h)
        displayHelp
        exit 0
        ;;
      \?)
        displayUsage
        _echo_error "Invalid option '-$OPTARG'"
        ;;
      :)
        displayUsage
        _echo_exit "Option '-$OPTARG' requires an argument"
        ;;
      *)
        _echo_exit "Internal command line parsing error"
        ;;
    esac
  done

  _echo_info "Detected '$kOS' Operating System"
  _echo_info "Distribution '$kOSDISTRO ($kOSVERSION)'"
  if isSystemSupported "$kOSDISTRO-$kOSVERSION" ; then
    _echo_info "System supported"
    doCheckSystemSoftware || _echo_exit "System check failed"
  else
    _echo_warning "Unsupported distribution '$kOSDISTRO' on '$kOS'
    
  Installation will proceed without system checks or initial bootstrapping
  See further instructions at <url>
  "
  fi

  doGithubClone "$installPrefix" || _echo_exit "Failed to clone repo"
  doBrewSetup "$installPrefix" || _echo_exit "Brew setup failed"

  return 0
}

main "$@"
exit $?
